/**
 * Author:     Crazy Broke Asians
 * Date:       Dec-08-2023
 * Course:     CS 3505, University of Utah
 * Assignment: A9: An Educational App
 * File Contents
 *      It contains all necessary information needed to form a description popup.
*/

#ifndef POPUPWINDOW_H
#define POPUPWINDOW_H

#include <QLabel>
#include <QWidget>
#include <QMediaPlayer>
#include <QAudioOutput>
#include <QStyle>

namespace Ui {
class PopUpWindow;
}

class PopUpWindow : public QWidget
{
    Q_OBJECT

public:
    ///
    /// \brief PopUpWindow
    ///     Constructor.
    /// \param parent - The parent widget.
    ///
    explicit PopUpWindow(QWidget *parent = nullptr);

    ///
    /// \brief Destructor
    ///
    ~PopUpWindow();

    ///
    /// \brief CloseWindow
    /// Closes the current popup window.
    ///
    void closeWindow();

public slots:
    ///
    /// \brief receiveSignalToSetTextIndia
    ///     Updates the popup window according to the button clicked
    ///     on the main window and sets the background, description and music as per the button clicked.
    /// \param name - The landmark name
    ///
    void receiveSignalToSetTextCountry(QString name);

private slots:
    /*
     * Button clicked slots are auto-generated by Qt, which makes the code-style looking different.
     */

    ///
    /// \brief on_nextButton_clicked
    /// Goes to the next page of description.
    ///
    void on_nextButton_clicked();

    ///
    /// \brief on_backButton_clicked
    /// Goes to the previous page of description.
    ///
    void on_backButton_clicked();

    ///
    /// \brief on_playMusic_clicked
    /// Plays music when clicked.
    ///
    void on_playMusic_clicked();

    ///
    /// \brief on_stopMusic_clicked
    /// Stops music when clicked.
    ///
    void on_stopMusic_clicked();

    ///
    /// \brief closeEvent
    /// Does certain things like stops the timer and music when the popup window is closed.
    ///
    void closeEvent(QCloseEvent *);

signals:
    // Signals that handle window closed event.
    void windowClosed();
    void stopTimer();

private:
    ///
    /// \brief ui
    /// UI for the popup window.
    ///
    Ui::PopUpWindow *ui;

    // Objects to set up the background and the typing animation.
    QTimer *timer;
    QLabel *backgroundLabel;

    // Necessary objects to display description on the window
    QString indiaLandMarkInfo[4];
    QString indiaRestaurantInfo[4];
    QString koreaLandMarkInfo[4];
    QString koreaRestaurantInfo[4];
    QString thailandLandMarkInfo[4];
    QString thailandRestaurantInfo[4];
    QString currentText;
    QString currentCountry;
    QStringList splittedText;

    // Objects to play the background music.
    QMediaPlayer *musicPlayer;
    QAudioOutput *musicOutput;

    // Keeps track of if the user has clicked next or back button for the first time.
    bool firstNextClicked = false;
    bool firstBackClicked = false;

    // Checks if current popup window is about landmark or restaurant.
    bool landMarkFlag = true;

    // The current description from the landmark/restaurant arrays to display.
    int current = 0;
    // Keeps track of the current letter to display on the popup window descriptions.
    int now = 0;

    ///
    /// \brief startTyping
    ///     Starts showing the letters of the descriptions letter by letter with a help of
    ///     a QTimer and shows the next and back button accordingly. Once all text is typed out it does not
    ///     type the same thing again unless the window is opened again.
    ///
    void startTyping();

    ///
    /// \brief nextButtonHelper
    ///     When next button is clicked on the popup, updates the description to further
    ///     information in addition to have the typing feature to it. Checks if the button is clicked for the
    ///     first button or not and updates information accordingly. This is done to check whether the
    ///     typing feature should be applied again to information that has already been shown.
    /// \param info - Description about countries.
    ///
    void nextButtonHelper(QString info[]);

    ///
    /// \brief backButtonHelper
    ///     When back button is clicked on the popup, updates the descrption to previous
    ///     information.
    /// \param info - Description about countries.
    ///
    void backButtonHelper(QString info[]);

    ///
    /// \brief buttonHelper
    ///     If the isNextButton is true, means the user clicked next for more information
    ///     so updates the window with remaining information of the current architecture/restaurent. Else
    ///     if it is false, measns the user clicked back for previous information so updates the window with
    ///     the previous information of the current architecture/restaurent.
    /// \param isNextButton - Checks if the next button was clicked or not.
    ///
    void buttonHelper(bool isNextButton);

    ///
    /// \brief setMusic
    ///     Setting up the background music based on the country.
    /// \param countryName - Current country that the user is at.
    ///
    void setMusic(QString countryName);

    ///
    /// \brief updateVolume
    ///     Updates volume based on the position of the slider.
    /// \param volume - The volume value to change.
    ///
    void updateVolume(int volume);


    // All the helper methods below do the exact same thing mentioned in the below header comment

    ///
    /// \brief setLandmarkIndiaHelper
    ///     Updates the popup window's background image and text according to the
    ///     button that was clicked by the user. Also sets the firstNextClicked to true since this is the very
    ///     first part of the information being displayed to the user.
    /// \param currentNum - The current information to display from the architecture/restaurent arrays.
    /// \param image - The image to display in the background of the popup.
    ///
    void setLandmarkIndiaHelper(int currentNum, QString image);
    void setRestaurantIndiaHelper(int currentNum, QString image);
    void setLandmarkThailandHelper(int currentNum, QString image);
    void setRestaurantThailandHelper(int currentNum, QString image);
    void setRestaurantKoreaHelper(int currentNum, QString image);
    void setLandmarkKoreaHelper(int currentNum, QString image);
};

#endif // POPUPWINDOW_H
